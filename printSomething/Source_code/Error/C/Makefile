# The format of this file is based on GNU_Make_Makefile_templates
# https://github.com/Vdragon/GNU_Make_Makefile_templates
# 變數
# Variables

## 關於專案本身的變數
## Variables about the project itself
NAME_PROJECT = NAME_PROJECT undefined
NAME_PROJECT_ABBRIEVIATION = VCCL
NAME_TARGET = NAME_TARGET undefined
NAME_MODULE = Error

## 目錄取名？
## Directory names?
DIR_SOURCE_CODE = Source_code
DIR_OBJECT_CODE = Object_code
DIR_BUILD = Build

## C/C++ 開發環境相關
## C/C++ development environment related
POSTFIX_TYPE_SOURCE_CODE_C = c
POSTFIX_TYPE_SOURCE_CODE_CPP = cpp
POSTFIX_TYPE_HEADER_C = h
POSTFIX_TYPE_HEADER_CPP = hpp
POSTFIX_TYPE_OBJECT_CODE_LINUX = o
POSTFIX_TYPE_OBJECT_CODE_DOS_WINDOWS = obj

### C 編譯器相關
### C compiler related
COMPILER_GCC = gcc
OPTION_GCC_WITH_DEBUGGING_SYMBOLS = -g
OPTION_GCC_ONLY_COMPILE = -c
OPTION_GCC_OUTPUT_FILENAME = -o
OPTION_GCC_WARNING_COMMON = -Wall
OPTION_GCC_DEBUG_INFO_MORE = -g3
OPTION_GCC_DEBUG_INFO = ${OPTION_GCC_DEBUG_INFO_MORE}
OPTION_GCC_OPTIMIZE_NONE = -O0
OPTION_GCC_STANDARD_ANSI_C = -ansi
OPTION_GCC_STANDARD_C99 = -std=c99
OPTION_GCC_STANDARD = ${OPTION_GCC_STANDARD_ANSI_C}

COMMAND_GCC_ONLY_COMPILE = ${COMPILER_GCC} ${OPTION_GCC_ONLY_COMPILE} ${OPTION_GCC_WARNING_COMMON} ${OPTION_GCC_STANDARD_ANSI_C} ${OPTION_GCC_DEBUG_INFO} ${OPTION_GCC_OPTIMIZE_NONE}

### C++ 編譯器相關
### C++ compiler related
COMPILER_GPP = g++

OPTION_GPP_WITH_DEBUGGING_SYMBOLS = ${OPTION_GCC_WITH_DEBUGGING_SYMBOLS}
OPTION_GPP_WARNING_COMMON = ${OPTION_GCC_WARNING_COMMON}
OPTION_GPP_ONLY_COMPILE = ${OPTION_GCC_ONLY_COMPILE}
OPTION_GPP_OUTPUT = ${OPTION_GCC_OUTPUT}

COMMAND_GPP_ONLY_COMPILE = ${COMPILER_GPP} ${OPTION_GPP_ONLY_COMPILE} ${OPTION_GPP_WARNING_COMMON}


### 連結器相關
### Linker related
POSTFIX_TYPE_DYNAMIC_LIBRARY_LINUX = so
POSTFIX_TYPE_DYNAMIC_LIBRARY_WINDOWS = dll

POSTFIX_TYPE_EXECUTABLE_WINDOWS = exe
POSTFIX_TYPE_EXECUTABLE_LINUX = executable

LINKER_GNU_LINKER = ld

OPTION_GNU_LINKER_OUTPUT_FILENAME = -o
OPTION_GNU_LINKER_LINK_GLIBC = -lc

### 函式庫封裝器相關
### Library archiver related
POSTFIX_TYPE_STATIC_LIBRARY_LINUX = a
POSTFIX_TYPE_STATIC_LIBRARY_WINDOWS = lib

ARCHIVER_LIBRARY_GNU_AR = ar

OPTION_GNU_AR_OPCODE_INSERT_OBJECT = r
OPTION_GNU_AR_MODIFIER_CREATE_FILE = c
OPTION_GNU_AR_MODIFIER_ADD_INDEX_INFO = s

## 刪除檔案相關
## Delete file related
### DOS/Windows
FILE_REMOVER_WINDOWS = del

### Unix
FILE_REMOVER_LINUX = rm
OPTION_FILE_REMOVER_LINUX_FORCE = --force

COMMAND_REMOVE_LINUX = ${FILE_REMOVER_LINUX} ${OPTION_FILE_REMOVER_LINUX_FORCE}

## 創造新目錄相關
## Create directory related
DIR_CREATER_WINDOWS = mkdir
DIR_CREATER_LINUX = mkdir

OPTION_MKDIR_CREATE_PARENT_AUTOMATICALLY = --parent

## System environment details related
### Unix
# -s is used instead of --sysname for portability
COMMAND_UNAME_FETCH_SYSTEM_NAME = uname -s
# -p is used instead of --processer for portability
COMMAND_UNAME_FETCH_PROCESSER_ARCHITECHTURE = uname -p

# 作業系統判斷規則，用來決定最終使用的變數
# Operating system determine rules, used to determine the final used variables
# 參考資料
# Reference data
#   1. http://stackoverflow.com/questions/714100/os-detecting-makefile
ifeq ($(OS), Windows_NT) # Windows 2000 or later
	COMMAND_C_COMPILER_ONLY_COMPILE = "Undefined command"
	COMMAND_CPP_COMPILER_ONLY_COMPILE = "Undefined command"
	
	COMMAND_LINK_EXECUTABLE = "Undefined command"
	
	COMMAND_BUILD_DYNAMIC_LIBRARY = "Undefined command"
	COMMAND_BUILD_STATIC_LIBRARY = "Undefined command"
	
	COMMAND_REMOVE_BUILT_ARTIFACTS = "Undefined command"
else # Assumed Unix, TODO: We need more
	UNIX_SYSTEM_NAME := $(shell ${COMMAND_UNAME_FETCH_SYSTEM_NAME})
	UNIX_PROCESSER_ARCHITECHTURE := $(shell ${COMMAND_UNAME_FETCH_PROCESSER_ARCHITECHTURE})
	
# Not used as we currently doesn't assemble our commands here...
#	COMPILER_C = ${COMPILER_GCC}
#	COMPILER_CPP = ${COMPILER_GPP}
	LINKER = ${LINKER_GNU_LINKER}
	FILE_REMOVER = ${REMOVER_LINUX}

	POSTFIX_TYPE_OBJECT_CODE = ${POSTFIX_TYPE_OBJECT_CODE_LINUX}
	POSTFIX_TYPE_DYNAMIC_LIBRARY = ${POSTFIX_TYPE_DYNAMIC_LIBRARY_LINUX}
	POSTFIX_TYPE_EXECUTABLE = ${POSTFIX_TYPE_EXECUTABLE_LINUX}
	POSTFIX_TYPE_STATIC_LIBRARY = ${POSTFIX_TYPE_STATIC_LIBRARY_LINUX}
	
	COMMAND_C_COMPILER_ONLY_COMPILE = ${COMMAND_GCC_ONLY_COMPILE}
	COMMAND_CPP_COMPILER_ONLY_COMPILE = ${COMMAND_GPP_ONLY_COMPILE}
	
# 因為 ${POSTFIX_TYPE_EXECUTABLE} 到這裡才定義所以只能在這裡組合
	COMMAND_LINK_EXECUTABLE = ${LINKER_GNU} ${OPTION_GNU_LINKER_LINK_GLIBC} ${OPTION_GNU_LINKER_OUTPUT} ${NAME_PROJECT}.${POSTFIX_TYPE_EXECUTABLE}
	
	COMMAND_BUILD_STATIC_LIBRARY = ${ARCHIVER_LIBRARY_GNU_AR} ${OPTION_GNU_AR_OPCODE_INSERT_OBJECT}${OPTION_GNU_AR_MODIFIER_CREATE_FILE}${OPTION_GNU_AR_MODIFIER_ADD_INDEX_INFO} lib${NAME_PROJECT_ABBRIEVIATION}_${NAME_MODULE}.${POSTFIX_TYPE_STATIC_LIBRARY}
	
	COMMAND_REMOVE_BUILT_ARTIFACTS = ${COMMAND_REMOVE_LINUX}
endif

# 通用 Make 規則
# Generic Make rules
%.${POSTFIX_TYPE_OBJECT_CODE} : %.${POSTFIX_TYPE_SOURCE_CODE_C}
	${COMMAND_C_COMPILER_ONLY_COMPILE} $^
%.${POSTFIX_TYPE_OBJECT_CODE} : %.${POSTFIX_TYPE_SOURCE_CODE_CPP}
	${COMMAND_CPP_COMPILER_ONLY_COMPILE} $^

# 主要內容
# Main content
.PHONY : all
all : compile link

.PHONY : build_executable
build_executable : compile link

.PHONY : build_library
build_library : compile archive_library

.PHONY : compile
compile : ${NAME_MODULE}.${POSTFIX_TYPE_OBJECT_CODE}

.PHONY : archive_library
archive_library : compile 
	${COMMAND_BUILD_STATIC_LIBRARY} *.${POSTFIX_TYPE_OBJECT_CODE}
	
.PHONY : link
link : compile
	${COMMAND_LINK_EXECUTABLE} *.${POSTFIX_TYPE_OBJECT_CODE}

.PHONY : clean
clean :
	${COMMAND_REMOVE_BUILT_ARTIFACTS} *.${POSTFIX_TYPE_OBJECT_CODE} *.${POSTFIX_TYPE_EXECUTABLE} *.${POSTFIX_TYPE_DYNAMIC_LIBRARY} *.${POSTFIX_TYPE_STATIC_LIBRARY}